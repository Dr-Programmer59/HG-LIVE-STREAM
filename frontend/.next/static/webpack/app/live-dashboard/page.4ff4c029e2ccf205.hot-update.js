"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/live-dashboard/page",{

/***/ "(app-pages-browser)/./src/mediasoup/webrtc_mediasoup_host.js":
/*!************************************************!*\
  !*** ./src/mediasoup/webrtc_mediasoup_host.js ***!
  \************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ webrtcMediaSoup_client; }\n/* harmony export */ });\n/* harmony import */ var mediasoup_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mediasoup-client */ \"(app-pages-browser)/./node_modules/mediasoup-client/lib/index.js\");\n/* harmony import */ var mediasoup_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mediasoup_client__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(app-pages-browser)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nfunction createSilentAudioTrack() {\n    const audioContext = new AudioContext();\n    const oscillator = audioContext.createOscillator();\n    const destination = audioContext.createMediaStreamDestination();\n    oscillator.frequency.value = 0; // Set frequency to 0 to generate silence\n    oscillator.connect(destination);\n    oscillator.start();\n    return destination.stream.getAudioTracks()[0];\n}\nclass webrtcMediaSoup_client {\n    joinRoom() {\n        console.log(this.mystream);\n        this.socket.emit(\"joinRoom\", {\n            roomName: this.roomName\n        }, (data)=>{\n            console.log(\"Router RTP Capabilities... \".concat(data.rtpCapabilities));\n            // we assign to local variable and will be used when\n            // loading the client Device (see createDevice above)\n            this.rtpCapabilities = data.rtpCapabilities;\n            // once we have rtpCapabilities from the Router, create Device\n            this.createDevice();\n        });\n    }\n    streamSuccess(stream) {\n        console.log(\"succesffuly get the media\");\n        if (stream.getAudioTracks().length === 0) {\n            // Create and add a silent audio track if none exists\n            const silentAudioTrack = createSilentAudioTrack();\n            stream.addTrack(silentAudioTrack);\n        }\n        this.mystream = stream;\n        this.mystreamCopy = stream;\n        this.audioParams = {\n            track: stream.getAudioTracks()[0],\n            ...this.audioParams\n        };\n        this.videoParams = {\n            track: stream.getVideoTracks()[0],\n            ...this.videoParams\n        };\n        this.joinRoom();\n    }\n    getLocalStream() {\n        console.log(\"succesffuly get the media\");\n        if (this.isscreenShared) {\n            navigator.mediaDevices.getDisplayMedia({\n                audio: true,\n                video: true\n            }).then((stream)=>{\n                this.streamSuccess(stream);\n            }).catch((error)=>{\n                console.log(error.message);\n            });\n        } else {\n            navigator.mediaDevices.getUserMedia({\n                audio: true,\n                video: true\n            }).then((stream)=>{\n                this.streamSuccess(stream);\n            }).catch((error)=>{\n                console.log(error.message);\n            });\n        }\n    }\n    // A device is an endpoint connecting to a Router on the\n    // server side to send/recive media\n    async createDevice() {\n        try {\n            this.device = new mediasoup_client__WEBPACK_IMPORTED_MODULE_0__.Device();\n            // https://mediasoup.org/documentation/v3/mediasoup-client/api/#device-load\n            // Loads the device with RTP capabilities of the Router (server side)\n            await this.device.load({\n                // see getRtpCapabilities() below\n                routerRtpCapabilities: this.rtpCapabilities\n            });\n            console.log(\"Device RTP Capabilities\", this.device.rtpCapabilities);\n            // once the device loads, create transport\n            this.createSendTransport();\n        } catch (error) {\n            console.log(error);\n            if (error.name === \"UnsupportedError\") console.warn(\"browser not supported\");\n        }\n        console.log(\"this is device created\", this.device);\n    }\n    createSendTransport() {\n        // see server's socket.on('createWebRtcTransport', sender?, ...)\n        // this is a call from Producer, so sender = true\n        this.socket.emit(\"createWebRtcTransport\", {\n            consumer: false\n        }, (param)=>{\n            let { params } = param;\n            // The server sends back params needed \n            // to create Send Transport on the client side\n            if (params.error) {\n                console.log(params.error);\n                return;\n            }\n            console.log(params);\n            // creates a new WebRTC Transport to send media\n            // based on the server's producer transport params\n            // https://mediasoup.org/documentation/v3/mediasoup-client/api/#TransportOptions\n            this.producerTransport = this.device.createSendTransport({\n                ...params,\n                iceServers: [\n                    {\n                        \"urls\": \"stun:stun1.l.google.com:19302\"\n                    }\n                ]\n            });\n            // https://mediasoup.org/documentation/v3/communication-between-client-and-server/#producing-media\n            // this event is raised when a first call to transport.produce() is made\n            // see connectSendTransport() below\n            this.producerTransport.on(\"connect\", async (param, callback, errback)=>{\n                let { dtlsParameters } = param;\n                try {\n                    // Signal local DTLS parameters to the server side transport\n                    // see server's socket.on('transport-connect', ...)\n                    await this.socket.emit(\"transport-connect\", {\n                        dtlsParameters\n                    });\n                    // Tell the transport that parameters were transmitted.\n                    callback();\n                } catch (error) {\n                    errback(error);\n                }\n            });\n            this.producerTransport.on(\"produce\", async (parameters, callback, errback)=>{\n                console.log(parameters);\n                try {\n                    // tell the server to create a Producer\n                    // with the following parameters and produce\n                    // and expect back a server side producer id\n                    // see server's socket.on('transport-produce', ...)\n                    await this.socket.emit(\"transport-produce\", {\n                        kind: parameters.kind,\n                        rtpParameters: parameters.rtpParameters,\n                        appData: parameters.appData,\n                        admin: this.isAdmin,\n                        viewer: false\n                    }, (param)=>{\n                        let { id, producersExist } = param;\n                        // Tell the transport that parameters were transmitted and provide it with the\n                        // server side producer's id.\n                        callback({\n                            id\n                        });\n                        // if producers exist, then join room\n                        if (producersExist) this.getProducers();\n                    });\n                } catch (error) {\n                    errback(error);\n                }\n            });\n            this.connectSendTransport();\n        });\n    }\n    handleScreenShareOff() {\n        navigator.mediaDevices.getUserMedia({\n            audio: true,\n            video: {\n                width: {\n                    min: 640,\n                    max: 1920\n                },\n                height: {\n                    min: 400,\n                    max: 1080\n                }\n            }\n        }).then((stream)=>{\n            this.videoParams = {\n                track: stream.getVideoTracks()[0],\n                ...this.videoParams\n            };\n            const videoTracks = this.mystream.getVideoTracks();\n            // Remove each video track\n            videoTracks.forEach((track)=>{\n                this.mystream.removeTrack(track);\n                track.stop(); // Stop the removed track to release resources\n            });\n            this.mystream.addTrack(stream.getVideoTracks()[0]);\n            this.videoProducer.replaceTrack({\n                track: stream.getVideoTracks()[0]\n            });\n        }).catch((error)=>{\n            console.log(error.message);\n        });\n    }\n    getlocalDisplayScreen() {\n        navigator.mediaDevices.getDisplayMedia({\n            video: true\n        }).then((stream)=>{\n            const screenTrack = stream.getTracks()[0];\n            this.videoProducer.replaceTrack({\n                track: screenTrack\n            });\n            screenTrack.onended = function() {\n                this.videoProducer.replaceTrack(userStream.current.getTracks()[1]);\n            };\n            const videoTracks = this.mystream.getVideoTracks();\n            // Remove each video track\n            videoTracks.forEach((track)=>{\n                this.mystream.removeTrack(track);\n                track.stop(); // Stop the removed track to release resources\n            });\n            this.mystream.addTrack(screenTrack);\n        }).catch((error)=>{\n            console.log(error.message);\n        });\n    }\n    async connectSendTransport() {\n        // we now call produce() to instruct the producer transport\n        // to send media to the Router\n        // https://mediasoup.org/documentation/v3/mediasoup-client/api/#transport-produce\n        // this action will trigger the 'connect' and 'produce' events above\n        if (this.mystream.getAudioTracks() != []) this.audioProducer = await this.producerTransport.produce(this.audioParams);\n        this.videoProducer = await this.producerTransport.produce(this.videoParams);\n        this.audioProducer.on(\"trackended\", ()=>{\n            console.log(\"audio track ended\");\n            this.audioDisconnect = true;\n        // close audio track\n        });\n        this.audioProducer.on(\"transportclose\", ()=>{\n            console.log(\"audio transport ended\");\n            this.audioDisconnect = true;\n        // close audio track\n        });\n        this.videoProducer.on(\"trackended\", ()=>{\n            console.log(\"video track ended\");\n            this.socket.disconnect();\n            this.videoDisconnect = true;\n        // close video track\n        });\n        this.videoProducer.on(\"transportclose\", ()=>{\n            console.log(\"video transport ended\");\n            this.videoDisconnect = true;\n        // close video track\n        });\n    }\n    async signalNewConsumerTransport(remoteProducerId, viewer) {\n        //check if we are already consuming the remoteProducerId\n        console.log(\"this is viewer in start \", viewer);\n        if (this.consumingTransports.includes(remoteProducerId)) return;\n        this.consumingTransports.push(remoteProducerId);\n        await this.socket.emit(\"createWebRtcTransport\", {\n            consumer: true\n        }, (param)=>{\n            let { params } = param;\n            // The server sends back params needed \n            // to create Send Transport on the client side\n            if (params.error) {\n                console.log(params.error);\n                return;\n            }\n            console.log(\"PARAMS... \".concat(params));\n            let consumerTransport;\n            try {\n                console.log(\"checking \", this.mystream);\n                consumerTransport = this.device.createRecvTransport(params);\n            } catch (error) {\n                // exceptions: \n                // {InvalidStateError} if not loaded\n                // {TypeError} if wrong arguments.\n                console.log(error);\n                return;\n            }\n            consumerTransport.on(\"connect\", async (param, callback, errback)=>{\n                let { dtlsParameters } = param;\n                try {\n                    // Signal local DTLS parameters to the server side transport\n                    // see server's socket.on('transport-recv-connect', ...)\n                    await this.socket.emit(\"transport-recv-connect\", {\n                        dtlsParameters,\n                        serverConsumerTransportId: params.id\n                    });\n                    // Tell the transport that parameters were transmitted.\n                    callback();\n                } catch (error) {\n                    // Tell the transport that something was wrong\n                    errback(error);\n                }\n            });\n            this.connectRecvTransport(consumerTransport, remoteProducerId, params.id, viewer);\n        });\n    }\n    async signalNewConsumerTransportHost(hostdata, socketId) {\n        //check if we are already consuming the remoteProducerId\n        if (this.consumingTransports.includes(hostdata[\"producerId\"])) return;\n        this.consumingTransports.push(hostdata[\"producerId\"]);\n        await this.socket.emit(\"createWebRtcTransport\", {\n            consumer: true\n        }, (param)=>{\n            let { params } = param;\n            // The server sends back params needed \n            // to create Send Transport on the client side\n            if (params.error) {\n                console.log(params.error);\n                return;\n            }\n            console.log(\"PARAMS... \".concat(params));\n            let consumerTransport;\n            try {\n                console.log(\"checking \", this.mystream);\n                consumerTransport = this.device.createRecvTransport(params);\n            } catch (error) {\n                // exceptions: \n                // {InvalidStateError} if not loaded\n                // {TypeError} if wrong arguments.\n                console.log(error);\n                return;\n            }\n            consumerTransport.on(\"connect\", async (param, callback, errback)=>{\n                let { dtlsParameters } = param;\n                try {\n                    // Signal local DTLS parameters to the server side transport\n                    // see server's socket.on('transport-recv-connect', ...)\n                    await this.socket.emit(\"transport-recv-connect\", {\n                        dtlsParameters,\n                        serverConsumerTransportId: params.id\n                    });\n                    // Tell the transport that parameters were transmitted.\n                    callback();\n                } catch (error) {\n                    // Tell the transport that something was wrong\n                    errback(error);\n                }\n            });\n            this.connectRecvTransportHost(consumerTransport, hostdata, socketId, params.id);\n        });\n    }\n    // server informs the client of a new producer just joined\n    getProducers() {\n        this.socket.emit(\"getProducers\", (producerIds)=>{\n            console.log(producerIds);\n            // for each of the producer create a consumer\n            // producerIds.forEach(id => signalNewConsumerTransport(id))\n            producerIds.forEach(this.signalNewConsumerTransportHost);\n        });\n    }\n    async connectRecvTransportHost(consumerTransport, hostdata, socketId, serverConsumerTransportId) {\n        // for consumer, we need to tell the server first\n        // to create a consumer based on the rtpCapabilities and consume\n        // if the router can consume, it will send back a set of params as below\n        await this.socket.emit(\"consume\", {\n            rtpCapabilities: this.device.rtpCapabilities,\n            remoteProducerId: hostdata[\"producerId\"],\n            serverConsumerTransportId\n        }, async (param)=>{\n            let { params } = param;\n            if (params.error) {\n                console.log(\"Cannot Consume\");\n                return;\n            }\n            console.log(\"Consumer Params \".concat(params));\n            // then consume with the local consumer transport\n            // which creates a consumer\n            const consumer = await consumerTransport.consume({\n                id: params.id,\n                producerId: params.producerId,\n                kind: params.kind,\n                rtpParameters: params.rtpParameters\n            });\n            this.consumerTransports = [\n                ...this.consumerTransports,\n                {\n                    consumerTransport,\n                    serverConsumerTransportId: params.id,\n                    producerId: hostdata[\"producerId\"],\n                    consumer\n                }\n            ];\n            // create a new div element for the new consumer media\n            // destructure and retrieve the video track from the producer\n            const { track } = consumer;\n            console.log(track, \"track receive\");\n            console.log(\"track \", track, \" producer id \", hostdata[\"producerId\"]);\n            let trackreq = new MediaStream([\n                track\n            ]);\n            if (!this.mainTracks[socketId]) {\n                this.mainTracks[socketId] = [];\n            }\n            this.mainTracks[socketId].push({\n                producerId: hostdata[\"producerId\"],\n                media: trackreq,\n                producerKind: hostdata[\"producerKind\"]\n            });\n            // document.getElementById(remoteProducerId).srcObject = new MediaStream([track])\n            console.log(\"this is track\", this.mainTracks);\n            // the server consumer started with media paused\n            // so we need to inform the server to resume\n            this.socket.emit(\"consumer-resume\", {\n                serverConsumerId: params.serverConsumerId\n            });\n        });\n    }\n    async connectRecvTransport(consumerTransport, remoteProducerId, serverConsumerTransportId, viewer) {\n        // for consumer, we need to tell the server first\n        // to create a consumer based on the rtpCapabilities and consume\n        // if the router can consume, it will send back a set of params as below\n        await this.socket.emit(\"consume\", {\n            rtpCapabilities: this.device.rtpCapabilities,\n            remoteProducerId,\n            serverConsumerTransportId\n        }, async (param)=>{\n            let { params } = param;\n            if (params.error) {\n                console.log(\"Cannot Consume\");\n                return;\n            }\n            console.log(\"Consumer Params \".concat(params));\n            // then consume with the local consumer transport\n            // which creates a consumer\n            const consumer = await consumerTransport.consume({\n                id: params.id,\n                producerId: params.producerId,\n                kind: params.kind,\n                rtpParameters: params.rtpParameters\n            });\n            this.consumerTransports = [\n                ...this.consumerTransports,\n                {\n                    consumerTransport,\n                    serverConsumerTransportId: params.id,\n                    producerId: remoteProducerId,\n                    consumer\n                }\n            ];\n            // create a new div element for the new consumer media\n            // destructure and retrieve the video track from the producer\n            const { track } = consumer;\n            console.log(\"track \", track, \" producer id \", remoteProducerId);\n            let trackreq = new MediaStream([\n                track\n            ]);\n            if (viewer) {\n                this.callers.push(trackreq);\n            } else {\n                this.mainTracks.push(trackreq);\n            }\n            // document.getElementById(remoteProducerId).srcObject = new MediaStream([track])\n            console.log(\"this is track\", track);\n            // the server consumer started with media paused\n            // so we need to inform the server to resume\n            this.socket.emit(\"consumer-resume\", {\n                serverConsumerId: params.serverConsumerId\n            });\n        });\n    }\n    constructor(isAdmin, socket, isscreenShared){\n        this.socket = socket;\n        this.isscreenShared = isscreenShared;\n        this.device;\n        this.roomName;\n        this.rtpCapabilities;\n        this.producerTransport;\n        this.consumerTransports = [];\n        this.audioProducer;\n        this.videoProducer;\n        this.consumer;\n        this.mainTracks = {};\n        this.callers = [];\n        this.isProducer = false;\n        this.mystream = null;\n        this.audioDisconnect = false;\n        this.videoDisconnect = false;\n        this.mystreamCopy = null;\n        this.isAdmin = isAdmin;\n        this.params = {\n            // mediasoup params\n            encodings: [\n                {\n                    rid: \"r0\",\n                    maxBitrate: 100000,\n                    scalabilityMode: \"S1T3\"\n                },\n                {\n                    rid: \"r1\",\n                    maxBitrate: 300000,\n                    scalabilityMode: \"S1T3\"\n                },\n                {\n                    rid: \"r2\",\n                    maxBitrate: 900000,\n                    scalabilityMode: \"S1T3\"\n                }\n            ],\n            // https://mediasoup.org/documentation/v3/mediasoup-client/api/#ProducerCodecOptions\n            codecOptions: {\n                videoGoogleStartBitrate: 1000\n            }\n        };\n        this.audioParams;\n        this.consumingTransports = [];\n        this.videoParams = {\n            // mediasoup params\n            encodings: [\n                {\n                    rid: \"r0\",\n                    maxBitrate: 100000,\n                    scalabilityMode: \"S1T3\"\n                },\n                {\n                    rid: \"r1\",\n                    maxBitrate: 300000,\n                    scalabilityMode: \"S1T3\"\n                },\n                {\n                    rid: \"r2\",\n                    maxBitrate: 900000,\n                    scalabilityMode: \"S1T3\"\n                }\n            ],\n            // https://mediasoup.org/documentation/v3/mediasoup-client/api/#ProducerCodecOptions\n            codecOptions: {\n                videoGoogleStartBitrate: 1000\n            }\n        };\n        this.signalNewConsumerTransport = this.signalNewConsumerTransport.bind(this);\n        this.connectRecvTransport = this.connectRecvTransport.bind(this);\n        this.signalNewConsumerTransportHost = this.signalNewConsumerTransportHost.bind(this);\n    // this.signalNewConsumerTransport=this.signalNewConsumerTransport.bind(this)\n    }\n}\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/mediasoup/webrtc_mediasoup_host.js\n"));

/***/ })

});